[gd_scene load_steps=10 format=3 uid="uid://dfxfeqlfoquo1"]

[ext_resource type="Script" path="res://question/question.gd" id="1_ylp3s"]
[ext_resource type="Script" path="res://question/page_flip.gd" id="3_6cptl"]
[ext_resource type="Texture2D" uid="uid://du4efqr2x6fl3" path="res://ui/question-frame.png" id="4_7pwvi"]
[ext_resource type="Theme" uid="uid://p8gcgrp1qpr7" path="res://question/question_theme.tres" id="4_aoen0"]

[sub_resource type="Shader" id="Shader_qprai"]
code = "shader_type canvas_item;
uniform vec2 scale;
uniform vec2 mouse_pos = vec2(-1.,-1.);

vec2 Line2point(vec2 linePoint,vec2 lineDire,vec2 point) {
	lineDire = normalize(lineDire);
	vec2 line2Ori = - linePoint - dot(-linePoint,lineDire)*lineDire;
	vec2 p2Ori = - point - dot(-point,lineDire)*lineDire;
	return line2Ori-p2Ori;
	}
vec4 ColorWithA(vec4 oldCol,vec4 newCol){
	vec4 finalCol;
	if((newCol.a + oldCol.a)>=1.)
	{
		finalCol.rgb = newCol.rgb ;
		finalCol.a =1.0;
	}
	else{
		finalCol.rgb = newCol.a/(newCol.a + oldCol.a)*newCol.rgb + oldCol.a/(newCol.a + oldCol.a)*oldCol.rgb;
		finalCol.a = oldCol.a +newCol.a;
		}
	return 	finalCol;
	}

void fragment() {
    vec2 uv = UV;
    //vec2 mouse_uv = vec2(0.0, 0.5);
    //vec2 mouse_pos = vec2(cos(TIME) * 64.0 + 65.0, cos(TIME) * 64.0 + 64.0);
    vec2 mouse_uv = mouse_pos;
    
	vec4 finalColor = vec4(0.0); // Initialize with transparent color
	//拉伸变形校正
	float scale_min = scale.x/scale.y;
	vec2 uv_max = vec2(scale_min,1.);
	float trueScale;
	if(scale.y<scale.x){
		scale_min = scale.y/scale.x;
		uv.y = uv.y * scale_min;
		uv_max = vec2(1.,scale_min);
//		mouse_uv = mouse_pos * TEXTURE_PIXEL_SIZE /scale.x;
		trueScale = scale.x;
		}
	else{
		uv.x = uv.x*scale_min;
//		mouse_uv = mouse_pos * TEXTURE_PIXEL_SIZE /scale.y;
		trueScale = scale.y;
	}

	COLOR= texture(TEXTURE,uv);


	//鼠标响应
	vec2 pPos = uv / TEXTURE_PIXEL_SIZE * trueScale;
	if (mouse_pos.x>-0.0001)
	{
		vec2 left_bottom = vec2(0.,uv_max.y/TEXTURE_PIXEL_SIZE.y * trueScale);
		vec2 midpoint = (mouse_pos - left_bottom)/2. + left_bottom;
//		vec2 midDirect = vec2(-1.,-1.)/1.414;
		vec2 midDirect = normalize(vec2(-(mouse_pos-left_bottom).y,(mouse_pos-left_bottom).x));
		//bg

		//pageback
		vec2 sharpPoint = vec2(0.,midpoint.y - midDirect.y/midDirect.x * midpoint.x);
		vec2 flipEdgeDire = normalize(sharpPoint - mouse_pos);
		//pagebackBottom
		vec2 sharpPointB = vec2(midpoint.x-midDirect.x/midDirect.y * (midpoint-left_bottom).y,left_bottom.y);
		vec2 flipEdgeDireB = normalize(sharpPointB - mouse_pos);

		//圆柱
		float cyOriOff = length(mouse_pos-left_bottom);
		if (cyOriOff>100.) cyOriOff = 100.;//圆柱向里面缩进
		float cyR = cyOriOff*2./PI;
		float pageHDire = PI/6.;
		vec2 midlineToP = Line2point(midpoint,midDirect,pPos);
		vec2 sideEdgeToP = Line2point(mouse_pos,flipEdgeDire,pPos);
		vec2 BottomEdgeToP = Line2point(mouse_pos,flipEdgeDireB,pPos);

		vec2 cyOriToP = midlineToP - normalize(mouse_pos- left_bottom)*cyOriOff;
		vec2 cyEdgeToP = midlineToP - normalize(mouse_pos- left_bottom)*(cyOriOff-cyR);

		bool atBG = (cyOriToP).x<=-0.01;
		bool atPageBack = !atBG&&(sideEdgeToP.y>0.)&&(BottomEdgeToP.x<=0.);
//		bool atCy = (cyOriToP).x<=0.;
		bool atCy = cyEdgeToP.x >=0. && (cyOriToP).x<=0.;
		bool atCyPage = false;
		vec2 uvCy ;
		vec2 uvCyB ;


		float shadow = 1.;
		if (atCy){
			vec2 cyOri = pPos-cyOriToP;
			vec2 trueDis = cyR*  asin(length(cyOriToP)/cyR)*normalize(cyOriToP);
			vec2 truePos = cyOri+trueDis;

			vec2 sideEdgeToTP = Line2point(mouse_pos,flipEdgeDire,truePos);
			vec2 BottomEdgeToTP = Line2point(mouse_pos,flipEdgeDireB,truePos);
			uvCyB = truePos * TEXTURE_PIXEL_SIZE /trueScale;
			shadow *= 1.-pow(length(trueDis)/(cyR*PI/2.),3.);

			if ((BottomEdgeToTP.x<0.)&& (sideEdgeToTP.y>0.))
				{
					atCyPage = true;
					uvCy = vec2(length(sideEdgeToTP),left_bottom.y-length(BottomEdgeToTP))*TEXTURE_PIXEL_SIZE /trueScale;
				}

			if ((uvCyB.x > uv_max.x)||(uvCyB.y > uv_max.y)||(uvCyB.x <= 0.)|| (uvCyB.y <= 0.))
				atCy =false;
		}


		//色彩
		COLOR = vec4(0.);
    // Page
    if (!atBG && !atCy) {
        vec4 color = texture(TEXTURE, uv);
        finalColor = color;
    }
    // cyBottom
    if (atCy) {
        vec4 cyColor = texture(TEXTURE, uvCyB);
        finalColor = cyColor;
    }

    if (atCyPage) {
        vec4 cyPageColor = texture(TEXTURE, uvCy);
        cyPageColor.xyz *= 0.8;
        // Blend based on the alpha value of cyPageColor
        finalColor = mix(finalColor, cyPageColor, cyPageColor.a);
    } else if (atPageBack) {
        uv = vec2(length(sideEdgeToP), left_bottom.y - length(BottomEdgeToP)) * TEXTURE_PIXEL_SIZE / trueScale;
        vec4 pageBackColor = texture(TEXTURE, uv);
        pageBackColor.xyz *= 0.8;
        // Blend based on the alpha value of pageBackColor
        finalColor = mix(finalColor, pageBackColor, pageBackColor.a);
    }

    COLOR = finalColor;
    //COLOR.a = mouse_pos.x;
}

	// Place fragment code here.

//	FRAGCOORD.xy;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_icg8j"]
resource_local_to_scene = true
shader = SubResource("Shader_qprai")
shader_parameter/scale = Vector2(1, 1)
shader_parameter/mouse_pos = Vector2(-1, -1)

[sub_resource type="ViewportTexture" id="ViewportTexture_f345l"]
viewport_path = NodePath("PageFlipViewport")

[sub_resource type="ViewportTexture" id="ViewportTexture_1iile"]
viewport_path = NodePath("ContentViewport")

[sub_resource type="LabelSettings" id="LabelSettings_xiar2"]
font_size = 40
font_color = Color(0.392157, 0.392157, 0.392157, 1)
outline_size = 4
outline_color = Color(0.392157, 0.392157, 0.392157, 1)

[node name="Question" type="Node2D"]
script = ExtResource("1_ylp3s")

[node name="FinalOutput" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_icg8j")
offset_left = -169.0
offset_top = -169.0
offset_right = 1124.0
offset_bottom = 786.0
texture = SubResource("ViewportTexture_f345l")
flip_h = true
script = ExtResource("3_6cptl")

[node name="PageFlipViewport" type="SubViewport" parent="."]
transparent_bg = true
size = Vector2i(1293, 955)

[node name="ViewportCanvasFront" type="TextureRect" parent="PageFlipViewport"]
offset_right = 1293.0
offset_bottom = 955.0
texture = SubResource("ViewportTexture_1iile")
flip_h = true

[node name="ContentViewport" type="SubViewport" parent="."]
transparent_bg = true
size = Vector2i(1293, 955)

[node name="CanvasFront" type="TextureRect" parent="ContentViewport"]
offset_left = 200.0
offset_top = 200.0
offset_right = 1293.0
offset_bottom = 955.0
size_flags_vertical = 0
theme = ExtResource("4_aoen0")
texture = ExtResource("4_7pwvi")

[node name="MarginContainer" type="MarginContainer" parent="ContentViewport/CanvasFront"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 60
theme_override_constants/margin_top = 60
theme_override_constants/margin_right = 60
theme_override_constants/margin_bottom = 60

[node name="Label" type="Label" parent="ContentViewport/CanvasFront/MarginContainer"]
layout_mode = 2
text = "Qual é a função do Scrum Master em um time Scrum?"
label_settings = SubResource("LabelSettings_xiar2")
